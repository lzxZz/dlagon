@startuml "class"







package Http{
    package Session_Cookie{
        SessionCollection o--> Session
        Session ..> Cookie
        Cookie o--> Path
        Cookie o--> CookieDomain : 暂未实现

        class SessionCollection{
            Get();
            New();
            Remove();

            msp<string, Session> collection_;
        }

        class Session{
            ID();
            Historical();
            AddHistorical();

            string id;
            vector<HttpRequest> historical_;
            string time_out_;//未实现
        }

        class Cookie{
            Name();
            Value();

            string name_;
            string value_;
            // 其他属性及其方法不再列出
        }
    }

    HttpClient --> HttpRequest
    HttpClient --> HttpResponse

    HttpRequest o--> HttpRequestHeader
    HttpRequest --> HttpMethod
    HttpRequest o--> ArgumentTable

    HttpResponse o--> HttpResponseHeader
    HttpResponseHeader o--> HttpResponseProtocol
    

    class HttpServer{
        Bind();
        Listen();
        Accept();
    }
    Class HttpClient{
        Send();
        Receive();
        GetRequest();
    }
    class HttpRequest {
        {static} Parse();
        Header();
        Body();
        HttpRequestHeader header_;
        string body_;
        ArugumentTable url_atgs_;
    }

    class HttpResponse{
        AddCookie();
        ClearCookie();
        ToString();
        SetBody();
        Body();
        Header();
        HttpResponseHeader header_;
        vector<Cookie> cookies_;
        string body_;
    }

    class ArgumentTable{
        Get();
        Set();
        Clear();
        Remvoe();
        ToString();
        map<string, string> arg_tables_;
    }

    class HttpRequestHeader{
        Method();
        Path();
        Version();
        ArgTable();
        AddArg();
        RemoveArg();
        Debug();
        Cookies();
        AddCookie();
        ClearCookie();

        HttpMethod method_;
        Path path_;
        string version_;
        ArgumentTable arg_table_;
        ArgumentTabble cookies_;
    }

    class HttpResponseHeader{
        ArgTable();
        AddCookie();
        ClearCookie();
        ToString();
        HttpResponseProtocol protocol_;
        ArugumentTable arg_table_;
        vector<Cookie> cookies_;

    }
    class HttpResponseProtocol{
        ToString();
        string version_;
        int state_code_;
        string state_info_;
    }

    enum HttpMethod{
        GET,
        POST,
        etc.
    }
}



package Basic_Net{
    TcpSocket --|> Socket
    UdpSocket --|> Socket
    TcpClientSocket o--> TcpSocket
    TcpServerSocket o--> TcpSocket
    HttpClient o--> TcpClientSocket
    HttpServer o--> TcpServerSocket



    TcpSocket ..> EndPoint
    UdpSocket ..> EndPoint

    class Socket {
        int fd_;
    }
    class EndPoint{
        sockaddr;
        Port();
        IP();
        SocketAddress();
    }

    class TcpSocket {
        Send();
        Receive();
        Bind();
        Listen();
        Connnect();
        Accept();
    }

    class UdpSocket{
        Bind();
        SendTo();
        ReceiveFrom();
    }
    class TcpClientSocket{
        Send();
        Receive();
    }
    class TcpServerSocket{
        Bind();
        Listen();
        Accept();
    }
    

}



package Core{
    Server o--> HttpServer
    Server o--> SessionCollection
    Server ..> Route
    Server ..> Handler
    Route ..> Handler

    class Server{
        Run();
        Route();
        SetRoute();

        HttpServer server_;
        Route route_;
        SessionCollection_ sessions_;

    }

    class Route{
        Distribute();
        Register();

        friend DefaultRoute;
        RouteFunction function_;
        Handler default_handler_;
        vector<Path> paths_;
        vector<Handler> handlers_;

    }

    class Handler{
        {static}GetFile();
        Excute();

        HandlerFunction worker_;
        HandlerFunctionWithSession worker_session_;


    }
}








@enduml